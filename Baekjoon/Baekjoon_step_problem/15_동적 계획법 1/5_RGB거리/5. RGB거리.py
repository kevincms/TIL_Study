'''
문제
 -RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.
집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

1번 집의 색은 2번 집의 색과 같지 않아야 한다.
N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.
입력
 -첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.
출력
 -첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.
예제 입력 1
 -3
26 40 83
49 60 57
13 89 99

예제 출력 1
 -96

예제 입력 2
 -3
1 100 100
100 1 100
100 100 1

예제 출력 2
 -3

예제 입력 3
 -3
1 100 100
100 100 100
1 100 100

예제 출력 3
 -102

예제 입력 4
 -6
30 19 5
64 77 64
15 19 97
4 71 57
90 86 84
93 32 91

예제 출력 4
 -208

예제 입력 5
 -8
71 39 44
32 83 55
51 37 63
89 29 100
83 58 11
65 13 15
47 25 29
60 66 19

예제 출력 5
 -253

https://www.acmicpc.net//problem/1149

big-o
0.5=천만번 10^7

n개의 입력이 들어오면
3*2^(n-1) ~= 2^n 모든 경우의 수는 안됨.

6. 정수 삼각형을 풀면서 푸는 알고리즘에 대해 정리봄
현재의 선택(입력으로 들어온 숫자)를 하기 위해 이전의 선택들의 합을 사용함.

그래서 코딩의 형태에 이전의 선택들의 합을 유지하기 위해 마지막에 for문으로 업데이트 하는 것을 알 수 있음
5. RGB
for i in range(3): sum[i]=c_rgb[i]+cost_list[t][i]

6.
for i in range(t+1): sum_list[i]=tri_list[i]
'''

import sys

input=sys.stdin.readline
input_t=int(input())
cost_list=[None]*input_t
sum=[0,0,0]
c_rgb=[None]*3
for t in range(input_t): cost_list[t]=list(map(int,input().split()))

for t in range(0,input_t):
    c_rgb[0]=min(sum[1],sum[2])
    c_rgb[1]=min(sum[0],sum[2])
    c_rgb[2]=min(sum[0],sum[1])
    for i in range(3): sum[i]=c_rgb[i]+cost_list[t][i]
        
final_min=min(min(sum[0],sum[1]),sum[2])
print(final_min)